package handlers

import (
	"fmt"
	"os/exec"
	"strings"

	"tgbot/internal/services/docker"
	"tgbot/internal/services/system"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

// CommandHandler –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
type CommandHandler struct {
	bot           *tgbotapi.BotAPI
	systemService *system.Monitor
	dockerService *docker.Manager
}

// NewCommandHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
func NewCommandHandler(bot *tgbotapi.BotAPI, systemService *system.Monitor, dockerService *docker.Manager) *CommandHandler {
	return &CommandHandler{
		bot:           bot,
		systemService: systemService,
		dockerService: dockerService,
	}
}

// HandleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã
func (h *CommandHandler) HandleCommand(update tgbotapi.Update) {
	if update.Message != nil {
		// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
		command := strings.TrimSpace(update.Message.Text)

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã
		switch {
		case command == "/start":
			h.handleStart(update)
		case command == "/status":
			h.handleStatus(update)
		case command == "/cpu":
			h.handleCPU(update)
		case command == "/ram":
			h.handleRAM(update)
		case command == "/hdd":
			h.handleHDD(update)
		case command == "/containers":
			h.handleContainers(update)
		case command == "/reboot":
			h.handleReboot(update)
		case command == "/shutdown":
			h.handleShutdown(update)
		default:
			h.handleUnknown(update)
		}
	} else if update.CallbackQuery != nil {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
		h.handleCallbackQuery(update)
	}
}

// handleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (h *CommandHandler) handleStart(update tgbotapi.Update) {
	// –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", "status"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üê≥ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã", "containers"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚öôÔ∏è –°–µ—Ä–≤–∏—Å—ã", "services"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üñ• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º", "server_management"),
		),
	)

	message := "ü§ñ *Telegram Server Bot*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, message)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

// handleStatus –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /status
func (h *CommandHandler) handleStatus(update tgbotapi.Update) {
	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
	cpuInfo, _ := h.systemService.GetCPUInfoString()
	memInfo, _ := h.systemService.GetMemoryInfoString()
	diskInfo, _ := h.systemService.GetDiskInfoString()

	message := fmt.Sprintf(`üìä *–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*

üíª CPU: %s

üß† RAM: %s

üíæ HDD: %s

`, cpuInfo, memInfo, diskInfo)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, message)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = h.createBackKeyboard()

	h.bot.Send(msg)
}

// handleCPU –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cpu
func (h *CommandHandler) handleCPU(update tgbotapi.Update) {
	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ CPU
	cpuInfo, _ := h.systemService.GetCPUInfoString()

	message := fmt.Sprintf(`üíª *–°—Ç–∞—Ç—É—Å CPU*

%s
`, cpuInfo)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, message)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = h.createBackKeyboard()

	h.bot.Send(msg)
}

// handleRAM –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /ram
func (h *CommandHandler) handleRAM(update tgbotapi.Update) {
	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏
	memInfo, _ := h.systemService.GetMemoryInfoString()

	message := fmt.Sprintf(`üß† *–°—Ç–∞—Ç—É—Å –ø–∞–º—è—Ç–∏*

%s
`, memInfo)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, message)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = h.createBackKeyboard()

	h.bot.Send(msg)
}

// handleHDD –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /hdd
func (h *CommandHandler) handleHDD(update tgbotapi.Update) {
	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö
	diskInfo, _ := h.systemService.GetDiskInfoString()

	message := fmt.Sprintf(`üíæ *–°—Ç–∞—Ç—É—Å –¥–∏—Å–∫–æ–≤*

%s
`, diskInfo)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, message)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = h.createBackKeyboard()

	h.bot.Send(msg)
}

// handleContainers –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /containers
func (h *CommandHandler) handleContainers(update tgbotapi.Update) {
	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	containers, err := h.dockerService.ListContainers()
	if err != nil {
		message := "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, message)
		h.bot.Send(msg)
		return
	}

	if len(containers) == 0 {
		message := "üì≠ –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, message)
		h.bot.Send(msg)
		return
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	var keyboard tgbotapi.InlineKeyboardMarkup
	buttons := make([][]tgbotapi.InlineKeyboardButton, 0)

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	for _, container := range containers {
		button := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("%s [%s]", container.Name, container.Status),
			fmt.Sprintf("container:%s", container.ID),
		)
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(button))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_main"),
	))

	keyboard = tgbotapi.NewInlineKeyboardMarkup(buttons...)

	message := "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, message)
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

// handleReboot –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /reboot
func (h *CommandHandler) handleReboot(update tgbotapi.Update) {
	// –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", "confirm_reboot"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "back_to_main"),
		),
	)

	message := "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä?"
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, message)
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

// handleShutdown –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /shutdown
func (h *CommandHandler) handleShutdown(update tgbotapi.Update) {
	// –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞, –≤—ã–∫–ª—é—á–∏—Ç—å", "confirm_shutdown"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "back_to_main"),
		),
	)

	message := "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä?"
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, message)
	msg.ReplyMarkup = keyboard

	h.bot.Send(msg)
}

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã
func (h *CommandHandler) handleCallbackQuery(update tgbotapi.Update) {
	callback := update.CallbackQuery
	data := callback.Data

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "–∫—Ä—É—Ç–∏–ª–∫—É"
	callbackResponse := tgbotapi.NewCallback(callback.ID, "")
	h.bot.AnswerCallbackQuery(callbackResponse)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö callback –∑–∞–ø—Ä–æ—Å–∞
	if strings.HasPrefix(data, "container:") {
		// –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
		containerID := strings.TrimPrefix(data, "container:")

		// –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîÑ Restart", "restart:"+containerID),
				tgbotapi.NewInlineKeyboardButtonData("üü• Stop", "stop:"+containerID),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üü© Start", "start:"+containerID),
				tgbotapi.NewInlineKeyboardButtonData("üìä Status", "status:"+containerID),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìù Logs", "logs:"+containerID),
				tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è Back", "back"),
			),
		)

		// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–µ–π—Å—Ç–≤–∏–π
		message := "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, message)
		msg.ReplyMarkup = keyboard

		h.bot.Send(msg)
	} else if data == "back" {
		// –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
		// –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π update –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ handleContainers
		fakeUpdate := tgbotapi.Update{
			Message: &tgbotapi.Message{
				Chat: callback.Message.Chat,
				Text: "/containers",
			},
		}
		h.handleContainers(fakeUpdate)
	} else if strings.HasPrefix(data, "restart:") {
		// –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
		containerID := strings.TrimPrefix(data, "restart:")
		h.handleContainerAction(callback, "restart", containerID)
	} else if strings.HasPrefix(data, "stop:") {
		// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
		containerID := strings.TrimPrefix(data, "stop:")
		h.handleContainerAction(callback, "stop", containerID)
	} else if strings.HasPrefix(data, "start:") {
		// –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
		containerID := strings.TrimPrefix(data, "start:")
		h.handleContainerAction(callback, "start", containerID)
	} else if strings.HasPrefix(data, "status:") {
		// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
		containerID := strings.TrimPrefix(data, "status:")
		h.handleContainerAction(callback, "status", containerID)
	} else if strings.HasPrefix(data, "logs:") {
		// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
		containerID := strings.TrimPrefix(data, "logs:")
		h.handleContainerAction(callback, "logs", containerID)
	} else if strings.HasPrefix(data, "service:") {
		// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–∏—Å–∞
		serviceName := strings.TrimPrefix(data, "service:")

		// –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîÑ Restart", "restart_service:"+serviceName),
				tgbotapi.NewInlineKeyboardButtonData("üü• Stop", "stop_service:"+serviceName),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üü© Start", "start_service:"+serviceName),
				tgbotapi.NewInlineKeyboardButtonData("üìä Status", "status_service:"+serviceName),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è Back", "services"),
			),
		)

		// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–µ–π—Å—Ç–≤–∏–π
		message := fmt.Sprintf("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ *%s*:", serviceName)
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID, message)
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = keyboard

		h.bot.Send(msg)
	} else if strings.HasPrefix(data, "restart_service:") {
		// –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
		serviceName := strings.TrimPrefix(data, "restart_service:")
		h.handleServiceAction(callback, "restart", serviceName)
	} else if strings.HasPrefix(data, "stop_service:") {
		// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
		serviceName := strings.TrimPrefix(data, "stop_service:")
		h.handleServiceAction(callback, "stop", serviceName)
	} else if strings.HasPrefix(data, "start_service:") {
		// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
		serviceName := strings.TrimPrefix(data, "start_service:")
		h.handleServiceAction(callback, "start", serviceName)
	} else if strings.HasPrefix(data, "status_service:") {
		// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
		serviceName := strings.TrimPrefix(data, "status_service:")
		h.handleServiceAction(callback, "status", serviceName)
	} else {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
		switch data {
		case "status":
			// –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π update –¥–ª—è –≤—ã–∑–æ–≤–∞ handleStatus
			fakeUpdate := tgbotapi.Update{
				Message: &tgbotapi.Message{
					Chat: callback.Message.Chat,
				},
			}
			h.handleStatus(fakeUpdate)
		case "containers":
			// –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π update –¥–ª—è –≤—ã–∑–æ–≤–∞ handleContainers
			fakeUpdate := tgbotapi.Update{
				Message: &tgbotapi.Message{
					Chat: callback.Message.Chat,
				},
			}
			h.handleContainers(fakeUpdate)
		case "services":
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
			h.handleServices(callback)
		case "server_management":
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º
			h.handleServerManagement(callback)
		case "reboot":
			// –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π update –¥–ª—è –≤—ã–∑–æ–≤–∞ handleReboot
			fakeUpdate := tgbotapi.Update{
				Message: &tgbotapi.Message{
					Chat: callback.Message.Chat,
				},
			}
			h.handleReboot(fakeUpdate)
		case "shutdown":
			// –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π update –¥–ª—è –≤—ã–∑–æ–≤–∞ handleShutdown
			fakeUpdate := tgbotapi.Update{
				Message: &tgbotapi.Message{
					Chat: callback.Message.Chat,
				},
			}
			h.handleShutdown(fakeUpdate)
		case "back_to_main":
			// –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π update –¥–ª—è –≤—ã–∑–æ–≤–∞ handleStart
			fakeUpdate := tgbotapi.Update{
				Message: &tgbotapi.Message{
					Chat: callback.Message.Chat,
				},
			}
			h.handleStart(fakeUpdate)
		case "confirm_reboot":
			// –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Ä–≤–µ—Ä–∞
			err := h.systemService.Reboot()
			if err != nil {
				message := fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
				msg := tgbotapi.NewMessage(callback.Message.Chat.ID, message)
				h.bot.Send(msg)
			} else {
				message := "üîÑ –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..."
				msg := tgbotapi.NewMessage(callback.Message.Chat.ID, message)
				h.bot.Send(msg)
			}
		case "confirm_shutdown":
			// –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
			err := h.systemService.Shutdown()
			if err != nil {
				message := fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
				msg := tgbotapi.NewMessage(callback.Message.Chat.ID, message)
				h.bot.Send(msg)
			} else {
				message := "üîå –°–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è..."
				msg := tgbotapi.NewMessage(callback.Message.Chat.ID, message)
				h.bot.Send(msg)
			}
		case "check_updates":
			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã
			message := "üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."
			msg := tgbotapi.NewMessage(callback.Message.Chat.ID, message)
			h.bot.Send(msg)

			// –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
			updates, err := h.systemService.CheckUpdates()
			if err != nil {
				message = fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: %v", err)
				msg = tgbotapi.NewMessage(callback.Message.Chat.ID, message)
				h.bot.Send(msg)
			} else {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
				lines := strings.Split(updates, "\n")
				packageCount := 0

				// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏ (–∏—Å–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
				for _, line := range lines {
					if strings.Contains(line, "/") && !strings.HasPrefix(line, "Listing...") {
						packageCount++
					}
				}

				if packageCount == 0 {
					// –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
					message = "‚úÖ –í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
					msg = tgbotapi.NewMessage(callback.Message.Chat.ID, message)
					h.bot.Send(msg)

					// –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π update –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
					fakeUpdate := tgbotapi.Update{
						Message: &tgbotapi.Message{
							Chat: callback.Message.Chat,
							Text: "/start",
						},
					}
					h.handleStart(fakeUpdate)
				} else {
					// –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
					// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤
					if len(updates) > 2000 {
						updates = updates[:2000] + "\n... (–≤—ã–≤–æ–¥ –æ–±—Ä–µ–∑–∞–Ω)"
					}
					message = fmt.Sprintf("üîç *–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:*\n```\n%s\n```", updates)
					msg = tgbotapi.NewMessage(callback.Message.Chat.ID, message)
					msg.ParseMode = "Markdown"
					h.bot.Send(msg)
				}
			}
		case "upgrade_system":
			// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
			message := "‚¨ÜÔ∏è –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
			msg := tgbotapi.NewMessage(callback.Message.Chat.ID, message)
			h.bot.Send(msg)

			// –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
			err := h.systemService.UpgradeSystem()
			if err != nil {
				message = fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: %v", err)
			} else {
				message = "‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"
			}

			msg = tgbotapi.NewMessage(callback.Message.Chat.ID, message)
			h.bot.Send(msg)
		}
	}
}

// handleServerManagement –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º
func (h *CommandHandler) handleServerManagement(callback *tgbotapi.CallbackQuery) {
	// –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", "reboot"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîå –í—ã–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", "shutdown"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "check_updates"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÜÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É", "upgrade_system"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_main"),
		),
	)

	message := "üñ• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
	editMsg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, message)
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &keyboard

	h.bot.Send(editMsg)
}

// handleServices –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ systemd —Å–µ—Ä–≤–∏—Å–æ–≤ —Å —Ü–≤–µ—Ç–æ–≤—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
func (h *CommandHandler) handleServices(callback *tgbotapi.CallbackQuery) {
	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
	services, err := h.systemService.GetServices()
	if err != nil {
		message := fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: %v", err)
		editMsg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, message)
		h.bot.Send(editMsg)
		return
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏
	var keyboard tgbotapi.InlineKeyboardMarkup
	buttons := make([][]tgbotapi.InlineKeyboardButton, 0)

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (–æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 30 –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
	limit := len(services)
	if limit > 30 {
		limit = 30
	}

	for i := 0; i < limit; i++ {
		service := services[i]
		button := tgbotapi.NewInlineKeyboardButtonData(
			service.Status,                          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
			fmt.Sprintf("service:%s", service.Name), // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –¥–ª—è callback
		)
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(button))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_main"),
	))

	keyboard = tgbotapi.NewInlineKeyboardMarkup(buttons...)

	message := "‚öôÔ∏è *–°–µ—Ä–≤–∏—Å—ã —Å–∏—Å—Ç–µ–º—ã*\n\n–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ —Å—Ç–∞—Ç—É—Å–∞:\nüü© - –∞–∫—Ç–∏–≤–Ω—ã–π\nüü• - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
	editMsg := tgbotapi.NewEditMessageText(callback.Message.Chat.ID, callback.Message.MessageID, message)
	editMsg.ParseMode = "Markdown"
	editMsg.ReplyMarkup = &keyboard

	h.bot.Send(editMsg)
}

// createBackKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
func (h *CommandHandler) createBackKeyboard() *tgbotapi.InlineKeyboardMarkup {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_main"),
		),
	)
	return &keyboard
}

// handleContainerAction –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
func (h *CommandHandler) handleContainerAction(callback *tgbotapi.CallbackQuery, action, containerID string) {
	var message string
	var err error

	switch action {
	case "restart":
		err = h.dockerService.RestartContainer(containerID)
		if err != nil {
			message = "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
		} else {
			message = "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
		}
	case "stop":
		err = h.dockerService.StopContainer(containerID)
		if err != nil {
			message = "‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
		} else {
			message = "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
		}
	case "start":
		err = h.dockerService.StartContainer(containerID)
		if err != nil {
			message = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
		} else {
			message = "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
		}
	case "status":
		status, err := h.dockerService.GetContainerStatus(containerID)
		if err != nil {
			message = fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: %v", err)
		} else {
			message = fmt.Sprintf("–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ *%s*:\n```\n%s\n```", containerID[:12], status)
		}
	case "logs":
		logs, err := h.dockerService.GetContainerLogs(containerID, 100)
		if err != nil {
			message = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
		} else {
			message = logs
		}
	}

	msg := tgbotapi.NewMessage(callback.Message.Chat.ID, message)
	if action == "status" || action == "logs" {
		msg.ParseMode = "Markdown"
	}
	h.bot.Send(msg)
}

// handleServiceAction –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º
func (h *CommandHandler) handleServiceAction(callback *tgbotapi.CallbackQuery, action, serviceName string) {
	var message string
	var cmd *exec.Cmd

	switch action {
	case "restart":
		cmd = exec.Command("sudo", "systemctl", "restart", serviceName+".service")
		err := cmd.Run()
		if err != nil {
			message = fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ %s: %v", serviceName, err)
		} else {
			message = fmt.Sprintf("‚úÖ –°–µ—Ä–≤–∏—Å %s —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω", serviceName)
		}
	case "stop":
		cmd = exec.Command("sudo", "systemctl", "stop", serviceName+".service")
		err := cmd.Run()
		if err != nil {
			message = fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ %s: %v", serviceName, err)
		} else {
			message = fmt.Sprintf("‚úÖ –°–µ—Ä–≤–∏—Å %s —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", serviceName)
		}
	case "start":
		cmd = exec.Command("sudo", "systemctl", "start", serviceName+".service")
		err := cmd.Run()
		if err != nil {
			message = fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ %s: %v", serviceName, err)
		} else {
			message = fmt.Sprintf("‚úÖ –°–µ—Ä–≤–∏—Å %s —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω", serviceName)
		}
	case "status":
		cmd = exec.Command("sudo", "systemctl", "status", serviceName+".service")
		output, err := cmd.Output()
		if err != nil {
			message = fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ %s: %v", serviceName, err)
		} else {
			// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤
			outputStr := string(output)
			if len(outputStr) > 1000 {
				outputStr = outputStr[:1000] + "\n... (–≤—ã–≤–æ–¥ –æ–±—Ä–µ–∑–∞–Ω)"
			}
			message = fmt.Sprintf("–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ *%s*:\n```\n%s\n```", serviceName, outputStr)
		}
	}

	msg := tgbotapi.NewMessage(callback.Message.Chat.ID, message)
	if action == "status" {
		msg.ParseMode = "Markdown"
	}
	h.bot.Send(msg)
}

// handleUnknown –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
func (h *CommandHandler) handleUnknown(update tgbotapi.Update) {
	message := "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, message)
	h.bot.Send(msg)
}
